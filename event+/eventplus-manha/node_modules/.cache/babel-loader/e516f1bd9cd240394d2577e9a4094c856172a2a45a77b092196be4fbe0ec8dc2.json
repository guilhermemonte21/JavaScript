{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\6352573355\\\\Desktop\\\\event+\\\\eventplus-manha\\\\src\\\\pages\\\\EventosAlunoPage\\\\EventosAlunoPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport MainContent from \"../../components/MainContent/MainContent\";\nimport Title from \"../../components/Title/Title\";\nimport Table from \"./TableEvA/TableEvA\";\nimport Container from \"../../components/Container/Container\";\nimport { Select } from \"../../components/FormComponents/FormComponents\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport Modal from \"../../components/Modal/Modal\";\nimport api, { eventsResource, myEventsResource, presencesEventResource } from \"../../Services/Service\";\nimport \"./EventosAlunoPage.css\";\nimport { UserContext } from \"../../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventosAlunoPage = () => {\n  _s();\n  // state do menu mobile\n\n  const [eventos, setEventos] = useState([]);\n  // select mocado\n  // const [quaisEventos, setQuaisEventos] = useState([\n  const quaisEventos = [{\n    value: 1,\n    text: \"Todos os eventos\"\n  }, {\n    value: 2,\n    text: \"Meus eventos\"\n  }];\n  const [tipoEvento, setTipoEvento] = useState(\"1\"); //código do tipo do Evento escolhido\n  const [showSpinner, setShowSpinner] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n\n  // recupera os dados globais do usuário\n  const {\n    userData\n  } = useContext(UserContext);\n  useEffect(() => {\n    loadEventsType();\n  }, [tipoEvento, userData.userId]); //\n\n  async function loadEventsType() {\n    setShowSpinner(true);\n    // setEventos([]); //zera o array de eventos\n    if (tipoEvento === \"1\") {\n      //todos os eventos (Evento)\n      try {\n        const todosEventos = await api.get(eventsResource);\n        const meusEventos = await api.get(`${myEventsResource}/${userData.userId}`);\n        const eventosMarcados = verificaPresenca(todosEventos.data, meusEventos.data);\n        setEventos(eventosMarcados);\n        console.clear();\n        console.log(\"TODOS OS EVENTOS\");\n        console.log(todosEventos.data);\n        console.log(\"MEUS EVENTOS\");\n        console.log(meusEventos.data);\n        console.log(\"EVENTOS MARCADOSSSS:\");\n        console.log(eventosMarcados);\n      } catch (error) {\n        //colocar o notification\n        console.log(\"Erro na API\");\n        console.log(error);\n      }\n    } else if (tipoEvento === \"2\") {\n      /**\n       * Lista os meus eventos (PresencasEventos)\n       * retorna um formato diferente de array\n       */\n      try {\n        const retornoEventos = await api.get(`${myEventsResource}/${userData.userId}`);\n        console.clear();\n        console.log(\"MINHAS PRESENÇAS\");\n        console.log(retornoEventos.data);\n        const arrEventos = []; //array vazio\n\n        retornoEventos.data.forEach(e => {\n          arrEventos.push({\n            ...e.evento,\n            situacao: e.situacao,\n            idPresencaEvento: e.idPresencaEvento\n          });\n        });\n\n        // console.log(arrEventos);\n        setEventos(arrEventos);\n      } catch (error) {\n        //colocar o notification\n        console.log(\"Erro na API\");\n        console.log(error);\n      }\n    } else {\n      setEventos([]);\n    }\n    setShowSpinner(false);\n  }\n  const verificaPresenca = (arrAllEvents, eventsUser) => {\n    for (let x = 0; x < arrAllEvents.length; x++) {\n      //para cada evento principal\n      for (let i = 0; i < eventsUser.length; i++) {\n        //procurar a correspondência em minhas presenças\n        if (arrAllEvents[x].idEvento === eventsUser[i].evento.idEvento) {\n          arrAllEvents[x].situacao = true;\n          arrAllEvents[x].idPresencaEvento = eventsUser[i].idPresencaEvento;\n          break; //paro de procurar para o evento principal atual\n        }\n      }\n    }\n\n    //retorna todos os eventos marcados com a presença do usuário\n    return arrAllEvents;\n  };\n\n  // toggle meus eventos ou todos os eventos\n  function myEvents(tpEvent) {\n    setTipoEvento(tpEvent);\n  }\n\n  // async function loadMyComentary(idComentary) {\n  //   return \"????\";\n  // }\n\n  // comentário post\n  // {\n\n  //   \"descricao\": \"string\",\n  //   \"exibe\": true,\n  //   \"idUsuario\": \"6566dd4e-56a8-4455-cc2c-08dbe52c834e\",\n  //   \"idEvento\": \"08c88fb2-1e57-4710-92e9-f9054bf1fa3c\"\n  // }\n\n  const showHideModal = () => {\n    setShowModal(showModal ? false : true);\n  };\n\n  // ler um comentário - get\n  const loadMyCommentary = () => {\n    alert(\"Carregar o comentário\");\n  };\n\n  // cadastrar um comentário = post\n  const postMyCommentary = () => {\n    alert(\"Carregar o comentário\");\n  };\n\n  // remove o comentário - delete\n  const commentaryRemove = () => {\n    alert(\"Remover o comentário\");\n  };\n  async function handleConnect(eventId, whatTheFunction, presencaId = null) {\n    if (whatTheFunction === \"connect\") {\n      try {\n        //connect\n        const promise = await api.post(presencesEventResource, {\n          situacao: true,\n          idUsuario: userData.userId,\n          idEvento: eventId\n        });\n        if (promise.status === 201) {\n          loadEventsType();\n          alert(\"Presença confirmada, parabéns\");\n        }\n      } catch (error) {}\n      return;\n    }\n\n    // unconnect - aqui seria o else\n    try {\n      const unconnected = await api.delete(`${presencesEventResource}/${presencaId}`);\n      if (unconnected.status === 204) {\n        loadEventsType();\n        alert(\"Desconectado do evento\");\n      }\n    } catch (error) {\n      console.log(\"Erro ao desconecar o usuário do evento\");\n      console.log(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainContent, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          titleText: \"Eventos\",\n          className: \"custom-title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          id: \"id-tipo-evento\",\n          name: \"tipo-evento\",\n          required: true,\n          options: quaisEventos // aqui o array dos tipos\n          ,\n          manipulationFunction: e => myEvents(e.target.value) // aqui só a variável state\n          ,\n          defaultValue: tipoEvento,\n          additionalClass: \"select-tp-evento\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          dados: eventos,\n          fnConnect: handleConnect,\n          fnShowModal: () => {\n            showHideModal();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), showSpinner ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 22\n    }, this) : null, showModal ? /*#__PURE__*/_jsxDEV(Modal, {\n      userId: userData.userId,\n      showHideModal: showHideModal,\n      fnGet: loadMyCommentary,\n      fnPost: postMyCommentary,\n      fnDelete: commentaryRemove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n_s(EventosAlunoPage, \"YsmSVDoPcKIY5BQFyIkxIbSkWyU=\");\n_c = EventosAlunoPage;\nexport default EventosAlunoPage;\nvar _c;\n$RefreshReg$(_c, \"EventosAlunoPage\");","map":{"version":3,"names":["React","useContext","useEffect","useState","MainContent","Title","Table","Container","Select","Spinner","Modal","api","eventsResource","myEventsResource","presencesEventResource","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","EventosAlunoPage","_s","eventos","setEventos","quaisEventos","value","text","tipoEvento","setTipoEvento","showSpinner","setShowSpinner","showModal","setShowModal","userData","loadEventsType","userId","todosEventos","get","meusEventos","eventosMarcados","verificaPresenca","data","console","clear","log","error","retornoEventos","arrEventos","forEach","e","push","evento","situacao","idPresencaEvento","arrAllEvents","eventsUser","x","length","i","idEvento","myEvents","tpEvent","showHideModal","loadMyCommentary","alert","postMyCommentary","commentaryRemove","handleConnect","eventId","whatTheFunction","presencaId","promise","post","idUsuario","status","unconnected","delete","children","titleText","className","fileName","_jsxFileName","lineNumber","columnNumber","id","name","required","options","manipulationFunction","target","defaultValue","additionalClass","dados","fnConnect","fnShowModal","fnGet","fnPost","fnDelete","_c","$RefreshReg$"],"sources":["C:/Users/6352573355/Desktop/event+/eventplus-manha/src/pages/EventosAlunoPage/EventosAlunoPage.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport MainContent from \"../../components/MainContent/MainContent\";\nimport Title from \"../../components/Title/Title\";\nimport Table from \"./TableEvA/TableEvA\";\nimport Container from \"../../components/Container/Container\";\nimport { Select } from \"../../components/FormComponents/FormComponents\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport Modal from \"../../components/Modal/Modal\";\nimport api, {\n  eventsResource,\n  myEventsResource,\n  presencesEventResource,\n} from \"../../Services/Service\";\n\nimport \"./EventosAlunoPage.css\";\nimport { UserContext } from \"../../context/AuthContext\";\n\nconst EventosAlunoPage = () => {\n  // state do menu mobile\n\n  const [eventos, setEventos] = useState([]);\n  // select mocado\n  // const [quaisEventos, setQuaisEventos] = useState([\n  const quaisEventos = [\n    { value: 1, text: \"Todos os eventos\" },\n    { value: 2, text: \"Meus eventos\" },\n  ];\n\n  const [tipoEvento, setTipoEvento] = useState(\"1\"); //código do tipo do Evento escolhido\n  const [showSpinner, setShowSpinner] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n\n  // recupera os dados globais do usuário\n  const { userData } = useContext(UserContext);\n\n  useEffect(() => {\n    loadEventsType();\n  }, [tipoEvento, userData.userId]); //\n\n  async function loadEventsType() {\n    setShowSpinner(true);\n    // setEventos([]); //zera o array de eventos\n    if (tipoEvento === \"1\") {\n      //todos os eventos (Evento)\n      try {\n        const todosEventos = await api.get(eventsResource);\n        const meusEventos = await api.get(\n          `${myEventsResource}/${userData.userId}`\n        );\n\n        const eventosMarcados = verificaPresenca(\n          todosEventos.data,\n          meusEventos.data\n        );\n\n        setEventos(eventosMarcados);\n\n        console.clear();\n\n        console.log(\"TODOS OS EVENTOS\");\n        console.log(todosEventos.data);\n\n        console.log(\"MEUS EVENTOS\");\n        console.log(meusEventos.data);\n\n        console.log(\"EVENTOS MARCADOSSSS:\");\n        console.log(eventosMarcados);\n      } catch (error) {\n        //colocar o notification\n        console.log(\"Erro na API\");\n        console.log(error);\n      }\n    } else if (tipoEvento === \"2\") {\n      /**\n       * Lista os meus eventos (PresencasEventos)\n       * retorna um formato diferente de array\n       */\n      try {\n        const retornoEventos = await api.get(\n          `${myEventsResource}/${userData.userId}`\n        );\n        console.clear();\n        console.log(\"MINHAS PRESENÇAS\");\n        console.log(retornoEventos.data);\n\n        const arrEventos = []; //array vazio\n\n        retornoEventos.data.forEach((e) => {\n          arrEventos.push({\n            ...e.evento,\n            situacao: e.situacao,\n            idPresencaEvento: e.idPresencaEvento,\n          });\n        });\n\n        // console.log(arrEventos);\n        setEventos(arrEventos);\n      } catch (error) {\n        //colocar o notification\n        console.log(\"Erro na API\");\n        console.log(error);\n      }\n    } else {\n      setEventos([]);\n    }\n    setShowSpinner(false);\n  }\n  const verificaPresenca = (arrAllEvents, eventsUser) => {\n    for (let x = 0; x < arrAllEvents.length; x++) {\n      //para cada evento principal\n      for (let i = 0; i < eventsUser.length; i++) {\n        //procurar a correspondência em minhas presenças\n        if (arrAllEvents[x].idEvento === eventsUser[i].evento.idEvento) {\n          arrAllEvents[x].situacao = true;\n          arrAllEvents[x].idPresencaEvento = eventsUser[i].idPresencaEvento;\n          break; //paro de procurar para o evento principal atual\n        }\n      }\n    }\n\n    //retorna todos os eventos marcados com a presença do usuário\n    return arrAllEvents;\n  };\n\n  // toggle meus eventos ou todos os eventos\n  function myEvents(tpEvent) {\n    setTipoEvento(tpEvent);\n  }\n\n  // async function loadMyComentary(idComentary) {\n  //   return \"????\";\n  // }\n\n  // comentário post\n  // {\n\n  //   \"descricao\": \"string\",\n  //   \"exibe\": true,\n  //   \"idUsuario\": \"6566dd4e-56a8-4455-cc2c-08dbe52c834e\",\n  //   \"idEvento\": \"08c88fb2-1e57-4710-92e9-f9054bf1fa3c\"\n  // }\n\n  const showHideModal = () => {\n    setShowModal(showModal ? false : true);\n  };\n\n\n  // ler um comentário - get\n  const loadMyCommentary = () => {\n    alert(\"Carregar o comentário\");\n  };\n\n  // cadastrar um comentário = post\n  const postMyCommentary = () => {\n    alert(\"Carregar o comentário\");\n  };\n\n  // remove o comentário - delete\n  const commentaryRemove = () => {\n    alert(\"Remover o comentário\");\n  };\n\n\n\n  async function handleConnect(eventId, whatTheFunction, presencaId = null) {\n    if (whatTheFunction === \"connect\") {\n      try {\n        //connect\n        const promise = await api.post(presencesEventResource, {\n          situacao: true,\n          idUsuario: userData.userId,\n          idEvento: eventId,\n        });\n\n        if (promise.status === 201) {\n          loadEventsType();\n          alert(\"Presença confirmada, parabéns\");\n        }\n      } catch (error) {}\n      return;\n    }\n\n    // unconnect - aqui seria o else\n    try {\n      const unconnected = await api.delete(\n        `${presencesEventResource}/${presencaId}`\n      );\n      if (unconnected.status === 204) {\n        loadEventsType();\n        alert(\"Desconectado do evento\");\n      }\n    } catch (error) {\n      console.log(\"Erro ao desconecar o usuário do evento\");\n      console.log(error);\n    }\n  }\n\n  return (\n    <>\n      <MainContent>\n        <Container>\n          <Title titleText={\"Eventos\"} className=\"custom-title\" />\n\n          <Select\n            id=\"id-tipo-evento\"\n            name=\"tipo-evento\"\n            required={true}\n            options={quaisEventos} // aqui o array dos tipos\n            manipulationFunction={(e) => myEvents(e.target.value)} // aqui só a variável state\n            defaultValue={tipoEvento}\n            additionalClass=\"select-tp-evento\"\n          />\n          <Table\n            dados={eventos}\n            fnConnect={handleConnect}\n            fnShowModal={() => {\n              showHideModal();\n            }}\n          />\n        </Container>\n      </MainContent>\n\n      {/* SPINNER -Feito com position */}\n      {showSpinner ? <Spinner /> : null}\n\n      {showModal ? (\n        <Modal\n          userId={userData.userId}\n          showHideModal={showHideModal}\n          fnGet={loadMyCommentary}\n          fnPost={postMyCommentary}\n          fnDelete={commentaryRemove}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default EventosAlunoPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}